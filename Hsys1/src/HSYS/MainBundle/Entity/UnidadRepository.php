<?php

namespace HSYS\MainBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UnidadRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UnidadRepository extends EntityRepository {

    public function findUnidadTipoHemocomponente($tipohemocomponente) {

        $em = $this->getEntityManager();
        $dql = "select u from HSYSMainBundle:Unidad u where u.estado <> :estado and u.TipoHemocomponente = :tipohemocomponente order by u.vencimiento asc";

        $query = $em->createQuery($dql);
        $query->setParameter('estado', 'Fraccionado');
        $query->setParameter('tipohemocomponente', $tipohemocomponente);

        $unidades = $query->getResult();
        return $unidades;
    }

    public function findUnidadPorEstado($estado) {
        $em = $this->getEntityManager();
        $dql = "select u from HSYSMainBundle:Unidad u where u.estado = :estado order by u.vencimiento asc";

        $query = $em->createQuery($dql);
        $query->setParameter('estado', $estado);

        $unidades = $query->getResult();
        return $unidades;
    }

    public function findUnidadRangoFecha($desde, $hasta) {
        if (!$desde) {
            $desde = new \DateTime('1900-01-01');
        }
        if (!$hasta) {
            $hasta = new \DateTime('2999-12-31');
        }
        $em = $this->getEntityManager();
        $dql = "select u from HSYSMainBundle:Unidad u where u.estado <> :estado and u.vencimiento >= :desde and u.vencimiento <= :hasta order by u.vencimiento asc";

        $query = $em->createQuery($dql);
        $query->setParameter('estado', 'Fraccionado');
        $query->setParameter('desde', $desde);
        $query->setParameter('hasta', $hasta);

        $unidades = $query->getResult();
        return $unidades;
    }

    public function findUnidadPorId($id) {
        $em = $this->getEntityManager();
        $dql = "select u from HSYSMainBundle:Unidad u where u.id like :id";

        $query = $em->createQuery($dql);
        $query->setParameter('id', '%' . $id . '%');

        $unidades = $query->getResult();
        return $unidades;
    }

    public function findUnidadPorDonacion($iddonacion) {
        $em = $this->getEntityManager();
        $dql = "select u from HSYSMainBundle:Unidad u, HSYSMainBundle:Donacion d where u.estado <> :estado and d.id = u.Donacion and d.numdedonacion = :iddonacion";

        $query = $em->createQuery($dql);
        $query->setParameter('estado', 'Fraccionado');
        $query->setParameter('iddonacion', $iddonacion);

        $unidades = $query->getResult();
        return $unidades;
    }

    public function findUnidadAvanzada($desde, $hasta, $estado, $tipo) {
        if (!$desde) {
            $desde = new \DateTime('1900-01-01');
        }
        if (!$hasta) {
            $hasta = new \DateTime('2999-12-31');
        }
        $em = $this->getEntityManager();
        if (!$tipo) {
            $dql = "select u from HSYSMainBundle:Unidad u where u.vencimiento >= :desde and u.vencimiento <= :hasta and u.estado like :estado order by u.vencimiento asc";
            $query = $em->createQuery($dql);
        } else {
            $dql = "select u from HSYSMainBundle:Unidad u where u.vencimiento >= :desde and u.vencimiento <= :hasta and u.estado like :estado and u.TipoHemocomponente = :tipo order by u.vencimiento asc";
            $query = $em->createQuery($dql);
            $query->setParameter('tipo', $tipo);
        }

        $query->setParameter('estado', '%' . $estado . '%');
        $query->setParameter('desde', $desde);
        $query->setParameter('hasta', $hasta);

        $unidades = $query->getResult();
        return $unidades;
    }

    public function findUnidadFactorSangui($factorsangui) {
        $em = $this->getEntityManager();
        $dql = "select u from HSYSMainBundle:Unidad u where u.estado <> :estado and u.factorsang like :factorsang order by u.vencimiento asc";

        $query = $em->createQuery($dql);
        $query->setParameter('estado', 'Fraccionado');
        $query->setParameter('factorsang', '%' . $factorsangui . '%');

        $unidades = $query->getResult();
        return $unidades;
    }

    public function generarDatosInformeDescarte($desde, $hasta) {
        $em = $this->getEntityManager();
        $dql = 'SELECT u.causadescarte as causa, count(u.id) as cant FROM HSYSMainBundle:Unidad u where u.estado = :descartado and u.fechadescarte >= :desde and u.fechadescarte <= :hasta group by u.causadescarte';

        $query = $em->createQuery($dql);
        $query->setParameter('descartado', 'Descartado');
        $query->setParameter('desde', $desde);
        $query->setParameter('hasta', $hasta);

        $informe = $query->getResult();
        return $informe;
    }

    public function generarDatosInformeDesbloqueo($desde, $hasta) {
        $em = $this->getEntityManager();
        $dql = 'SELECT t.nombre as hemo, u.factorsang as factor, count(u.id) as cant FROM HSYSMainBundle:Unidad u JOIN HSYSMainBundle:TipoHemocomponente t where u.estado = :desbloqueado and u.fechadesbloqueo >= :desde and u.fechadesbloqueo <= :hasta and u.TipoHemocomponente = t.id group by t.nombre, u.factorsang';

        $query = $em->createQuery($dql);
        $query->setParameter('desbloqueado', 'Desbloqueado');
        $query->setParameter('desde', $desde);
        $query->setParameter('hasta', $hasta);

        $informe = $query->getResult();
        return $informe;
    }
    
    public function generarDatosInformeVencimiento($fecha){
        $em = $this->getEntityManager();
        $dql = 'SELECT u FROM HSYSMainBundle:Unidad u WHERE u.vencimiento = :fecha AND u.estado <> :descartado AND u.estado <> :fraccionado AND u.estado <> :transfundido';
        
        $query = $em->createQuery($dql);
        $query->setParameter('fecha', $fecha);
        $query->setParameter('descartado', 'Descartado');
        $query->setParameter('fraccionado', 'Fraccionado');
        $query->setParameter('fraccionado', 'Fraccionado');
        $query->setParameter('transfundido', 'Transfundido');
        
        $informe = $query->getResult();
        return $informe;
    }

}
